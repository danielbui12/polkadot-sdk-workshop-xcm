diff --git a/fundamentals/src/xcm_executor.rs b/fundamentals/src/xcm_executor.rs
index f97757d..d50d85a 100644
--- a/fundamentals/src/xcm_executor.rs
+++ b/fundamentals/src/xcm_executor.rs
@@ -99,15 +99,23 @@ impl<Config: XcmConfig> XcmExecutor<Config> {
 			//
 			// - `assets`: The asset(s) to be withdrawn into holding.
 			WithdrawAsset(assets) => {
-				/* TODO:
-					- Process everything inside a `TransactionalProcessor`.
-					- Get the `origin` or return `XcmError::BadOrigin`.
-					- For each `asset` in `assets`
-						- Use the `AssetTransactor` to `withdraw_asset`.
-					- `and_then`, if everything goes okay...
-					- `subsume_assets` into the `self.holding`
-				*/
-				todo!("{:?}", assets)
+				Config::TransactionalProcessor::process(|| {
+					let origin = self.origin_ref().ok_or(XcmError::BadOrigin)?;
+					// Take `assets` from the origin account (on-chain)...
+					for asset in assets.inner() {
+						Config::AssetTransactor::withdraw_asset(
+							asset,
+							origin,
+							Some(&self.context),
+						)?;
+					}
+					Ok(())
+				})
+				.and_then(|_| {
+					// ...and place into holding.
+					self.holding.subsume_assets(assets.into());
+					Ok(())
+				})
 			},
 			// Reduce Holding by up to the given assets.
 			//
@@ -115,8 +123,8 @@ impl<Config: XcmConfig> XcmExecutor<Config> {
 			// not an error if the Holding does not contain the assets (to make this an error, use
 			// `ExpectAsset` prior).
 			BurnAsset(assets) => {
-				/* TODO: Simply `saturating_take` `assets` from the `self.holding`. */
-				todo!("{:?}", assets)
+				self.holding.saturating_take(assets.into());
+				Ok(())
 			},
 			// Remove the asset(s) (`assets`) from the Holding Register and place equivalent assets
 			// under the ownership of `beneficiary` within this consensus system.
